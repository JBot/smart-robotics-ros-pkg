<launch>

    <!-- Load the URDF/Xacro model of our robot -->
    <param name="robot_description" command="$(find xacro)/xacro.py '$(find indomptable_model)/urdf/indomptable.urdf.xacro'" />

    <!-- Publish the robot state -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="state_publisher">
        <param name="publish_frequency" value="20.0"/>
    </node>

    <!-- Load the URDF/Xacro model of our robot -->
    <param name="field_description" command="$(find xacro)/xacro.py '$(find indomptable_model)/urdf/field.urdf.xacro'" />

    <!-- Publish the robot state -->
    <node name="field_state_publisher" pkg="robot_state_publisher" type="state_publisher">
        <param name="publish_frequency" value="20.0"/>
        <remap from="robot_description" to="field_description" />
    </node>





    <node pkg="indomptable_arm" type="arm_manager" name="arm_manager" output="screen">
    </node>

    <node pkg="indomptable_arm" type="arm_left" name="left_arm" output="screen">
        <!-- Init params -->
        <remap from="arm_pose" to="left_arm_pose" />
        <remap from="shoulder_roll_joint" to="left_shoulder_roll_controller/command" />
        <remap from="shoulder_lift_joint" to="left_shoulder_lift_controller/command" />
        <remap from="elbow_joint" to="left_elbow_controller/command" />
        <remap from="wrist_joint" to="left_wrist_controller/command" />
        <remap from="hand_joint" to="left_hand_joint" />
        <remap from="hand" to="left_hand" />
        <remap from="pump" to="left_pump" />
        <remap from="pump_feedback" to="left_pump_feedback" />
        <param name="arm_pose_name" value="left" type="string"/>
        <param name="arm_pose_y" value="-60" type="int"/>
    </node>

    <node pkg="indomptable_arm" type="arm_right" name="right_arm" output="screen">
        <!-- Init params -->
        <remap from="arm_pose" to="right_arm_pose" />
        <remap from="shoulder_roll_joint" to="right_shoulder_roll_controller/command" />
        <remap from="shoulder_lift_joint" to="right_shoulder_lift_controller/command" />
        <remap from="elbow_joint" to="right_elbow_controller/command" />
        <remap from="wrist_joint" to="right_wrist_controller/command" />
        <remap from="hand_joint" to="right_hand_joint" />
        <remap from="hand" to="right_hand" />
        <remap from="pump" to="right_pump" />
        <remap from="pump_feedback" to="right_pump_feedback" />
        <param name="arm_pose_name" value="right" type="string"/>
        <param name="arm_pose_y" value="60" type="int"/>
    </node>




  <node pkg="rosserial_python" type="serial_node.py" name="arduino_serial_odometry" respawn="true" output="screen">
    <param name="baud" value="115200" />
    <param name="port" value="/dev/ttyUSB0" />
  </node>

  <node pkg="hokuyo_node" type="hokuyo_node" name="laser_publisher" output="screen">
    <param name="frame_id" value="base_laser" />
    <param name="port" value="/dev/ttyACM0" />
   <!-- <param name="min_ang" value="-1.92" />
    <param name="max_ang" value="1.95" /> -->
    <param name="min_ang" value="-1.72" />
    <param name="max_ang" value="1.75" />
  </node> 

  <node pkg="indomptable_nav" type="indomptable_transform_pose_hector" name="indomptable_pose_node" respawn="true" output="screen">
  </node>
<!--
  <node pkg="indomptable_nav" type="fougueux_transform_pose_hector" name="fougueux_pose_node" respawn="true" output="screen">
  </node>
-->
  <!-- Publish a static transform between the robot base and the map frame -->
  <node pkg="tf" type="static_transform_publisher" name="map_base_broadcaster" args="0 0 0 0 0 0 /map /odom 100" />  
  <node pkg="tf" type="static_transform_publisher" name="map_base_broadcasterf" args="0 1.4 0 0 0 0 /map /base_link2 100" />

  <node pkg="eurobot_obstacles" type="pc_eurobot_obstacles" name="eurobot_obstacles" respawn="true" output="screen">
  </node>

  <node pkg="map_server" type="map_server" name="eurobot_map" args="$(find indomptable_nav)/mymap.yaml" respawn="true" output="screen">
  </node>
 
  <node pkg="indomptable_nav" type="pathwrapper" name="indomptable_pathwrapper" respawn="true" output="screen">
  </node>



  <master auto="start"/>

  <node pkg="move_base" type="move_base" respawn="false" name="move_base_indomptable" output="screen">
    <rosparam file="$(find indomptable_nav)/launch/costmap_common_params_fake.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find indomptable_nav)/launch/localcostmap_common_params_fake.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find indomptable_nav)/launch/local_costmap_params_hector.yaml" command="load" />
    <rosparam file="$(find indomptable_nav)/launch/global_costmap_params_hector.yaml" command="load" />
    <rosparam file="$(find indomptable_nav)/launch/base_local_planner_params_hector.yaml" command="load" />
  </node>







</launch>
